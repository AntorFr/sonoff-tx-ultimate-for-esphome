substitutions:
  name: sonoff-tx-ultimate
  friendly_name: TX Ultimate

  relais_1_pin: GPIO18
  relais_2_pin: GPIO17
  relais_3_pin: GPIO27
  relais_4_pin: GPIO23

  vibra_motor_pin: GPIO21
  pa_power_pin: GPIO26

  led_pin: GPIO13

  uart_tx_pin: GPIO09
  uart_rx_pin: GPIO10

  audio_lrclk_pin: GPIO4
  audio_bclk_pin: GPIO2
  audio_sdata_pin: GPIO15

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: true
  project:
    name: smarthomeyourself.sonoff_tx_ultimate
    version: "1.0"
    
esp32:
  board: esp32dev
  framework:
    type: arduino


dashboard_import:
  package_import_url: github://SmartHome-yourself/sonoff-tx-ultimate-for-esphome/tx_ultimate.yaml@main
  import_full_config: false

logger:
  hardware_uart: UART2
  level: INFO

api:

ota:

wifi:
  ap:
    password: "12345678"
    
improv_serial:

captive_portal:

external_components:
  - source: /config/esphome/my_components

switch:
  - platform: gpio
    id: relay_1
    name: "${friendly_name} L1"
    pin: ${relais_1_pin}

  - platform: gpio
    id: relay_2
    name: "${friendly_name} L2"
    pin: ${relais_2_pin}

  - platform: gpio
    id: relay_3
    name: "${friendly_name} L3"
    pin: ${relais_3_pin}

  - platform: gpio
    id: vibra
    pin: ${vibra_motor_pin}
    name: "${friendly_name} Vibration"
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: gpio
    id: pa_power
    pin: ${pa_power_pin}
    name: "PA Power"
    restore_mode: RESTORE_DEFAULT_ON

binary_sensor:
  - platform: template
    name: "Touchfield 1"
    id: touchfield_1

  - platform: template
    name: "Touchfield 2"
    id: touchfield_2

  - platform: template
    name: "Touchfield 3"
    id: touchfield_3

light:
  - platform: neopixelbus
    type: GRB
    variant: WS2811
    pin: ${led_pin}
    num_leds: 28
    name: "NeoPixel Light"
    id: leds
    default_transition_length: 0s
    effects:
      - addressable_rainbow:
          name: "Rainbow"
          speed: 10
          width: 20
      - pulse:
          name: "Pulse"
          transition_length: 1.4s
          update_interval: 1s

media_player:
  - platform: i2s_audio
    id: media_out
    name: ${friendly_name} Player
    dac_type: external
    i2s_dout_pin: ${audio_sdata_pin}
    i2s_audio_id: audio_i2s
    mode: mono

i2s_audio:
  id: audio_i2s
  i2s_lrclk_pin: ${audio_lrclk_pin}
  i2s_bclk_pin: ${audio_bclk_pin}

uart:
  tx_pin: GPIO19
  rx_pin: GPIO22
  id: my_uart
  baud_rate: 115200
  data_bits: 8
  stop_bits: 1
  parity: NONE
  
#  debug:
#    direction: RX
#    dummy_receiver: false
#    after:
#      timeout: 2s
#      bytes: 2048
#    sequence:
#      - lambda: UARTDebug::log_hex(direction, bytes, ' ');


tx_ultimate_touch:
  id: tx_touch
  uart: my_uart

  on_press:
    - script.execute:
        id: touch_led_marker
        pos: !lambda "return touch.x;"
        state: !lambda "return touch.state;"
    - lambda: >
        ESP_LOGI("tx_ultimate_touch", "Touch Position: %d / State: %d", touch.x, touch.state);

  on_release:
    - script.execute:
        id: touch_led_marker
        pos: !lambda "return touch.x;"
        state: !lambda "return touch.state;"

    - lambda: >
        ESP_LOGI("tx_ultimate_touch", "Release Position: %d / State: %d", touch.x, touch.state);

  on_swipe_left:
    - script.execute:
        id: touch_led_marker
        pos: !lambda "return touch.x;"
        state: !lambda "return touch.state;"

    - lambda: >
        ESP_LOGI("tx_ultimate_touch", "Swipe Left Position: %d / State: %d", touch.x, touch.state);

  on_swipe_right:
    - script.execute:
        id: touch_led_marker
        pos: !lambda "return touch.x;"
        state: !lambda "return touch.state;"

    - lambda: >
        ESP_LOGI("tx_ultimate_touch", "Swipe Right Position: %d / State: %d", touch.x, touch.state);

  on_full_touch_release:
    - script.execute:
        id: touch_led_marker
        pos: !lambda "return touch.x;"
        state: !lambda "return touch.state;"

    - lambda: >
        ESP_LOGI("tx_ultimate_touch", "Full Touch Release Position: %d / State: %d", touch.x, touch.state);

script:
  - id: touch_led_marker
    mode: restart
    parameters:
      state: int
      pos: int
    then:
      - if:
          condition:
            lambda: "return state==1;"
          then:
            # RELEASE
            - light.turn_off: leds

          else:
            - if:
                condition:
                  lambda: "return state==2;"
                then:
                  # TOUCH
                  - light.turn_on:
                      id: leds
                      red: 1
                      green: 0
                      blue: 0
                  - delay: 1s
                  - light.turn_off: leds

                else:
                  - if:
                      condition:
                        lambda: "return state==11;"
                      then:
                        # FULL-TOUCH RELEASE
                        - light.turn_on:
                            id: leds
                            effect: "Rainbow"
                        - delay: 1s
                        - light.turn_off: leds

                      else:
                        # SWIPE
                        - if:
                            condition:
                              lambda: "return state==13;"
                            then:
                              # SWIPE LEFT
                              - light.turn_on:
                                  id: leds
                                  red: 0
                                  green: 1
                                  blue: 0

                        - if:
                            condition:
                              lambda: "return state==12;"
                            then:
                              # SWIPE RIGHT
                              - light.turn_on:
                                  id: leds
                                  red: 0
                                  green: 0
                                  blue: 1
                        - delay: 1s
                        - light.turn_off: leds
